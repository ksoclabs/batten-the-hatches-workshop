{"config":{"lang":["en"],"separator":"[\\s\\-\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Batten Down the Hatches! A Cluster Security Journey","text":"<p>In this hands-on workshop, the instructors will dive into the methods used to perform a successful real world Kubernetes security audit. Attendees will learn through instructor-led scenarios how to perform cluster / workload inventory, rapidly assess the security posture of workloads, enforce least privilege for end-users and service accounts, and comply with established compliance standards.  Each workshop attendee will be provided with a pre-configured public cloud environment running real-world Kubernetes workloads.  The tools and methodologies covered in this workshop will give attendees the real world experience to perform a rapid Kubernetes security posture audit in their own organization\u2019s clusters.</p> <p>Use the Copy to Clipboard Feature</p> <p>Each terminal command block in this guide has a double-square icon on the far right side which automatically copies the content to your paste buffer to make things easier to follow along.</p>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Click on \"Getting Started\" in the table of contents.</p>"},{"location":"#about-the-creators","title":"About the Creators","text":"<ul> <li> <p>Jimmy Mesta is the co-founder and CTO at KSOC. He has been helping security teams approach Kubernetes since 2016. Prior to founding KSOC, Jimmy held senior leadership positions at a number of enterprises including Signal Sciences (acquired by Fastly, Inc.) where he led a team of researchers and engineers. He is a well-versed public speaker and has presented at a variety of global conferences including KubeCon, LocoMocoSec, RSA, NDC, CactusCon, and AppSec USA.</p> </li> <li> <p>Steve Wade is currently one of the founding engineers at KSOC. Before his current role, Steve held Platform leadership roles at UnderWrite Me and Mettle. During these roles, he leveraged the concept of GitOps to provide self-service platforms to developers. He has also provided Kubernetes consultancy and training worldwide during his time as a Consultant at Apprenda. Steve has served in leadership roles across many verticals including real estate, gaming, and the UK parliament.</p> </li> </ul>"},{"location":"0-setup/","title":"Getting Started","text":"<p>These instructions will set up your workshop environment. </p> <p>PLEASE USE AN INCOGNITO BROWSER SESSION</p> <ol> <li>Login to https://console.cloud.google.com</li> <li>Select your project from the top left dropdown</li> <li>Click on the \"Hamburger\" menu in the top left and select \"Kubernetes Engine\" from the menu that appears</li> <li>Click on your cluster name</li> <li>Click on the \"Connect\" button</li> <li>Click on the \"Run in Cloud Shell\" button</li> <li>Copy the command that appears and paste it into the Cloud Shell and press enter</li> <li>Then run <code>git clone https://github.com/ksoclabs/batten-the-hatches-workshop.git</code></li> <li>Then run <code>cd batten-the-hatches-workshop</code></li> <li>Then run <code>cd workshop &amp;&amp; make init</code></li> </ol>"},{"location":"0-setup/#validation","title":"Validation","text":"<p>When the script is finished, verify it worked correctly.</p> <pre><code>```console\nkubectl get pods -n sec-ctx\n```\n</code></pre> <p>The output should look similar to this (some workloads are crashing which is expected at this point):</p> <pre><code>NAME                                             READY   STATUS                       RESTARTS   AGE\nall-at-once-6df575c7f4-zgfkz                     1/1     Running                      0          2m40s\nallow-no-privilege-escalation-749bc6b98c-swv9j   1/1     Running                      0          2m43s\nempty-dirs-nginx-read-only-fs-98444b967-64cww    1/1     Running                      0          73s\nfailing-nginx-read-only-fs-545cfcb4c7-f85vw      0/1     CrashLoopBackOff             3          73s\nread-only-fs-5f585bd48b-jwn9z                    1/1     Running                      0          74s\nrun-as-non-root-69dd94dd89-9vnjs                 0/1     CreateContainerConfigError   0          79s\nrun-as-non-root-unprivileged-755d88d78c-dj7hf    1/1     Running                      0          79s\nrun-as-user-976bb47fd-9xw5c                      0/1     CrashLoopBackOff             3          77s\nrun-as-user-unprivileged-6b755d5ccd-7blx8        1/1     Running                      0          77s\nrun-with-certain-caps-6d8fdf5c96-7nfkr           1/1     Running                      0          75s\nrun-with-seccomp-5b9fdfff4f-n5htr                1/1     Running                      0          76s\nrun-without-caps-f545b8cb9-m2fr5                 0/1     CrashLoopBackOff             3          75s\nrun-without-caps-unprivileged-6854865667-w5lwf   1/1     Running                      0          74s\n</code></pre> <p>If the output looks similar to the above, you are ready to move on to the next section.</p>"},{"location":"1-inventory/","title":"1 Asset Inventory","text":"<p>Firstly, we need to understand what assets we are going to auditing.</p> <p>The following are useful assets to audit:</p> <ol> <li>Kubernetes Version</li> <li>Cloud Provider (AWS, GCP, Azure, etc.)</li> <li>Kubernetes Networking Metadata</li> </ol>"},{"location":"1-inventory/#kubernetes-version","title":"Kubernetes Version","text":"<p>The version of Kubernetes is an important aspect of your audit.  You should be aware of the version of Kubernetes you are running and how it is supported.  You should have a clear understanding of the Kubernetes version lifecycle and the support policy of your Kubernetes distribution.</p> <p>The Kubernetes project maintains a version skew policy that defines the relationship between the Kubernetes control plane and the Kubernetes nodes.  This policy defines the supported versions of Kubernetes and the minimum version of the control plane for each Kubernetes version.  This policy also defines the maximum version skew between the control plane and the node components.</p> <p>You can find the supported versions of Kubernetes in the release notes for each release.  For example, the Kubernetes release notes for version 1.25.0 can be found here.</p> <p>The version of Kubernetes you are running can be found by running the following command:</p> <pre><code>$ kubectl version\n</code></pre> <p>The output of the command should be similar to the following:</p> <pre><code>Client Version: version.Info{Major:\"1\", Minor:\"25\", GitVersion:\"v1.25.0\", GitCommit:\"2d3c76f9091b6bec110a5e63777c332469e0cba2\", GitTreeState:\"clean\", BuildDate:\"2021-09-28T14:51:23Z\", GoVersion:\"go1.16.7\", Compiler:\"gc\", Platform:\"darwin/amd64\"}\nServer Version: version.Info{Major:\"1\", Minor:\"25\", GitVersion:\"v1.25.0\", GitCommit:\"2d3c76f9091b6bec110a5e63777c332469e0cba2\", GitTreeState:\"clean\", BuildDate:\"2021-09-28T14:51:23Z\", GoVersion:\"go1.16.7\", Compiler:\"gc\", Platform:\"linux/amd64\"}\n</code></pre> <p>The output above shows that the client version is 1.25.0 and the server version is 1.25.0.  The client version is the version of the <code>kubectl</code> binary you are running.  The server version is the version of the Kubernetes control plane you are connected to.</p> <p>If you are running a managed Kubernetes service, you should check the version of Kubernetes that is supported by the service. </p> <ul> <li>Amazon EKS</li> <li>Google GKE</li> <li>Azure AKS</li> </ul>"},{"location":"1-inventory/#official-kubernetes-cve-feed","title":"Official Kubernetes CVE Feed","text":"<p>Kubernetes provides an official CVE feed that you should subscribe to in order to ensure that your cluster versions are always up-to-date. </p>"},{"location":"1-inventory/#cloud-provider","title":"Cloud Provider","text":"<p>If you are running Kubernetes on a cloud provider, you should be aware of the cloud provider you are using.  You should also be aware of the capabilities of the cloud provider and how it impacts your Kubernetes cluster.</p> <p>If you are running Kubernetes on AWS, you should be aware of the capabilities of EKS.  You should also be aware of the limitations of EKS and how it impacts your Kubernetes cluster.</p> <p>For example, if you are running Kubernetes on AWS, you should be aware of the following:</p> <ul> <li>EKS Service Limits</li> <li>EKS Security Groups</li> </ul> <p>If you are running Kubernetes on GCP, you should be aware of the capabilities of GKE.</p> <ul> <li>GKE Service Limits</li> </ul> <p>If you are running Kubernetes on Azure, you should be aware of the capabilities of AKS.</p> <ul> <li>AKS Service Limits</li> <li>AKS Security Groups</li> </ul>"},{"location":"1-inventory/#kubernetes-networking-metadata","title":"Kubernetes Networking Metadata","text":"<p>You should be aware of the networking metadata of the cloud provider and how it impacts your Kubernetes cluster.</p> <p>If you are running Kubernetes on AWS, you should be aware of the following:</p> <ul> <li>EKS Networking</li> <li>EKS VPC CNI Plugin</li> </ul> <p>If you are running Kubernetes on GCP, you should be aware of the following:</p> <ul> <li>GKE Networking</li> </ul> <p>If you are running Kubernetes on Azure, you should be aware of the following:</p> <ul> <li>AKS Networking</li> <li>AKS Subnet</li> </ul>"},{"location":"1-inventory/#kubernetes-api-resources","title":"Kubernetes API Resources","text":"<p>The Kubernetes API  Using <code>kubectl api-resources -o wide</code> shows all the resources, verbs and associated API-group:</p> <p><pre><code>kubectl api-resources -o wide\n</code></pre> We get name, namespaced, kind, shortnames, and apiversion of the resources by executing the command as mentioned above.</p> <p>NAME \u2013 Shows the source to which the permissions are related</p> <p>KIND \u2013 Shows the title of the resource</p> <p>SHORTNAMES - A very useful code-named when interrelating with kubectl resources</p> <p>APIVERSION \u2013 Resembles the role required of the API groups</p> <p>VERBS \u2013 Displays the existing available verbs, and it is helpful when describing RBAC rules.</p>"},{"location":"1-inventory/#list-all-container-images","title":"List all Container Images","text":"<p>As you audit a Kubernetes cluster, it is important to understand exactly which container images are running inside of the environment. The following command will extract the images in your cluster for all namespaces:</p> <pre><code>kubectl get pods --all-namespaces -o jsonpath=\"{.items[*].spec.containers[*].image}\" |\\\ntr -s '[[:space:]]' '\\n' |\\\nsort |\\\nuniq -c\n</code></pre>"},{"location":"1-inventory/#list-all-kubernetes-objects","title":"List all Kubernetes Objects","text":"<p>To understand our attack surface and scope for the audit we need to ensure that a complete list of all running objects is obtained. The following command can quickly enumerate <code>pods</code>, <code>deployments</code>, <code>services</code>, and more:</p> <pre><code>kubectl get all --all-namespaces\n</code></pre> <p>You will notice that the output of <code>kubectl get all</code> is not comprehensive. An open-source project called ketall is installed in your shell. This will print out a much more comprehensive inventory to the screen. </p> <pre><code>ketall\n</code></pre>"},{"location":"1-inventory/#next-steps","title":"Next Steps","text":"<p>Now lets begin our audit in-depth by looking at the configuration of our Kubernetes workloads here.</p>"},{"location":"2-workload-security/","title":"2 Workload Configurations","text":"<p>The workload security section of this workshop can be ran by executing the following command:</p> <pre><code>./1-workloads/demo/interactive-demo.sh\n</code></pre> <p>This will start a demo that will walk you through the different concepts of workload security.</p> <p>We are now ready to look at RBAC configuration here.</p>"},{"location":"3-rbac/","title":"3 RBAC Assessment","text":"<p>The RBAC security section of this workshop can be ran by executing the following command:</p> <pre><code>./2-rbac/demo/interactive-demo.sh\n</code></pre> <p>This will start a demo that will walk you through the different concepts of RBAC security.</p> <p>Commands for <code>list</code> demo:</p> <pre><code>curl -k https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/sec-ctx/secrets/abc -H \"Authorization: Bearer $(kubectl -n sec-ctx get secrets -ojson | jq '.items[]| select(.metadata.annotations.\"kubernetes.io/service-account.name\"==\"only-list-secrets-sa\")| .data.token' | tr -d '\"' | base64 -d)\"\n</code></pre> <pre><code>curl -k https://${KUBERNETES_SERVICE_HOST}:${KUBERNETES_SERVICE_PORT}/api/v1/namespaces/sec-ctx/secrets?limit=500 -H \"Authorization: Bearer $(kubectl -n sec-ctx get secrets -ojson | jq '.items[]| select(.metadata.annotations.\"kubernetes.io/service-account.name\"==\"only-list-secrets-sa\")| .data.token' | tr -d '\"' | base64 -d)\"\n</code></pre> <p>Now we know what we should be looking for its time to perform an audit of your cluster.</p>"},{"location":"3-rbac/#audit","title":"Audit","text":"<p>The audit section of this workshop can be ran by executing the following command:</p> <pre><code>./3-audit/demo/interactive-demo.sh\n</code></pre>"},{"location":"3-rbac/#guardrails","title":"Guardrails","text":"<p>Now that we have performed an audit of our cluster we can start to implement guardrails to prevent the issues we found from happening again.</p> <p>For this section of the workshop click here.</p>"},{"location":"4-guardrails/","title":"4 Guardrails","text":"<p>The Guardrails section of this workshop can be ran by executing the following command:</p> <pre><code>./4-guardrails/demo/interactive-demo.sh\n</code></pre> <p>We are on the home straight, time to review what we've learnt here.</p>"},{"location":"5-wrapup/","title":"Wrap Up","text":"<p>Congrats! You've made it to the end of the workshop. \ud83c\udf89</p>"},{"location":"5-wrapup/#what-have-we-covered","title":"What have we covered?","text":"<ul> <li>How to obtain an asset inventory for your Kubernetes cluster</li> <li>How to leverage <code>securityContext</code> to help secure your workloads </li> <li>How <code>list</code> and <code>watch</code> RBAC permissions can be used to escalate privileges</li> <li>How to perform an audit of your cluster using shopify/kubeaudit</li> <li>How to use corneliusweig/ketall to enumerate all Kubernetes objects in your cluster</li> <li>How to use Gatekeeper to enforce policies in your cluster to prevent insecure configurations from being deployed</li> </ul>"},{"location":"5-wrapup/#feedback","title":"Feedback","text":"<p>If you could take two minutes to fill in the feedback form here it would be greatly appreciated.</p>"},{"location":"5-wrapup/#reach-out","title":"Reach out","text":"<p>If you have any questions or feedback, please reach out to Jimmy and myself:</p> <ul> <li>Twitter: @jimmesta and @swade1987</li> <li>Email: jimmy@ksoc.com and steve@ksoc.com</li> </ul>"}]}